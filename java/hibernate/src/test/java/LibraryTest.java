/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.opentable.db.postgres.embedded.EmbeddedPostgres;
import liquibase.Contexts;
import liquibase.LabelExpression;
import liquibase.Liquibase;
import liquibase.database.Database;
import liquibase.database.DatabaseFactory;
import liquibase.database.jvm.JdbcConnection;
import liquibase.exception.LiquibaseException;
import liquibase.resource.ClassLoaderResourceAccessor;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.junit.Before;
import org.junit.Test;
import pojo.Department;
import pojo.DepartmentName;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class LibraryTest {

    private EmbeddedPostgres embeddedPostgres;
    private SessionFactory sessionFactory;

    @Before
    public void setUp() throws SQLException, LiquibaseException, IOException {
        if(embeddedPostgres == null) {
            initializeEmbeddedDatabase();

            initializeSchema();

            initializeHibernate();
        }
    }

    private void initializeHibernate() throws IOException {
        Properties properties = new Properties();
        properties.load(LibraryTest.class.getResourceAsStream("/hibernate.properties"));
        properties.setProperty("hibernate.connection.url", "jdbc:postgresql://127.0.0.1:"
                + embeddedPostgres.getPort() + "/");

        Configuration configuration = new Configuration().addProperties(properties);
        configuration.addAnnotatedClass(Department.class);
        sessionFactory = configuration.buildSessionFactory();
    }

    private void initializeEmbeddedDatabase() throws IOException {
        embeddedPostgres = EmbeddedPostgres.builder().
                setDataDirectory(Paths.get(System.getProperty("java.io.tmpdir"), "hibernate-postgresql-dir2")).
                start();
    }

    private void initializeSchema() throws SQLException, LiquibaseException {
        try (Connection connection = DriverManager.getConnection("jdbc:postgresql://127.0.0.1:"
                + embeddedPostgres.getPort() + "/", "postgres", "")) {
            Database database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnection(connection));
            Liquibase liquibase = new Liquibase("db/db_changelog.xml", new ClassLoaderResourceAccessor(), database);
            liquibase.update(new Contexts(), new LabelExpression());
        }
    }

    private Session openSession() {
        return sessionFactory.openSession();
    }

    @Test
    public void testMinimalisticMapping() throws SQLException, LiquibaseException {
        try(Session session = openSession()){
            session.beginTransaction();
            Department department = new Department();
            department.setActive(true);
            department.setName(new DepartmentName().setFirstName("firstName").setSecondName("secondName"));
            department.setId(1);
            session.save(department);
            session.getTransaction().commit();
        }

        try(Session session = openSession()){
            Department department = session.get(Department.class, 1);
            assertEquals(new DepartmentName().setFirstName("firstName").setSecondName("secondName"), department.getName());
            assertTrue(department.isActive());
        }
    }
}
